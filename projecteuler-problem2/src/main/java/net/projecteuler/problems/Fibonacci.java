package net.projecteuler.problems;

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * 
 * @author akaszczuk
 *
 */
public class Fibonacci {
   private static final Logger LOGGER = LoggerFactory.getLogger(Fibonacci.class);
   /**
    * 
    * @param firstSeed
    * @param secondSeed
    */
   public static BigInteger calculateFibonacciSequence(BigInteger firstSeed, BigInteger secondSeed, BigInteger finalTerm) {
      BigInteger result = BigInteger.ZERO;

      while(secondSeed.compareTo(finalTerm) <= 0) {
         final BigInteger fibNumber = firstSeed.add(secondSeed);
         firstSeed = secondSeed;
         secondSeed = fibNumber;

         if (fibNumber.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO)) {
            LOGGER.info("{} is being added to {}", fibNumber, result);
            result = result.add(fibNumber);
         }
      }

      return result;
   }
}
